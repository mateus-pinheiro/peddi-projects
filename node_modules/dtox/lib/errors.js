'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Common DTO errors
 *
 * @author Patrick Stadler <patrick.stadler@gmail.com>
 * @author Michael Weibel <michael.weibel@gmail.com>
 */

var inherits = require('inherits');

/**
 * Base error
 *
 * Still in ES5 style because of http://stackoverflow.com/q/33870684/315242
 * (instanceof with babel transpiling doesn't work on native classes)
 *
 * @param {string} msg error message
 */
function BaseError(msg) {
  BaseError.super_.call(this, msg);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  }
  this.message = msg;
  this.name = this.constructor.name;
}

inherits(BaseError, Error);

/**
 * Mapping error
 */

var MappingError = function (_BaseError) {
  _inherits(MappingError, _BaseError);

  function MappingError() {
    _classCallCheck(this, MappingError);

    return _possibleConstructorReturn(this, (MappingError.__proto__ || Object.getPrototypeOf(MappingError)).apply(this, arguments));
  }

  return MappingError;
}(BaseError);

/**
 * Invalid argument error
 */


var InvalidArgumentError = function (_BaseError2) {
  _inherits(InvalidArgumentError, _BaseError2);

  function InvalidArgumentError() {
    _classCallCheck(this, InvalidArgumentError);

    return _possibleConstructorReturn(this, (InvalidArgumentError.__proto__ || Object.getPrototypeOf(InvalidArgumentError)).apply(this, arguments));
  }

  return InvalidArgumentError;
}(BaseError);

/**
 * Invalid property error
 */


var InvalidPropertyError = function (_BaseError3) {
  _inherits(InvalidPropertyError, _BaseError3);

  function InvalidPropertyError() {
    _classCallCheck(this, InvalidPropertyError);

    return _possibleConstructorReturn(this, (InvalidPropertyError.__proto__ || Object.getPrototypeOf(InvalidPropertyError)).apply(this, arguments));
  }

  return InvalidPropertyError;
}(BaseError);

/**
 * Missing property error
 */


var MissingPropertyError = function (_BaseError4) {
  _inherits(MissingPropertyError, _BaseError4);

  function MissingPropertyError() {
    _classCallCheck(this, MissingPropertyError);

    return _possibleConstructorReturn(this, (MissingPropertyError.__proto__ || Object.getPrototypeOf(MissingPropertyError)).apply(this, arguments));
  }

  return MissingPropertyError;
}(BaseError);

module.exports = {
  MappingError: MappingError,
  InvalidArgumentError: InvalidArgumentError,
  InvalidPropertyError: InvalidPropertyError,
  MissingPropertyError: MissingPropertyError
};